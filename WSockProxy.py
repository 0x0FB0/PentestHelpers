#!/usr/bin/python

# pip install websocket-client
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import SocketServer, ssl, urllib, websocket, argparse, sys

class S(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
    def log_message(self, format, *args):
	if verbose:
		sys.stderr.write("\033[34m[SRV] %s - - [%s] %s\033[0m\n" %
			(self.address_string(),
			self.log_date_time_string(),
			format%args))

    def do_GET(self):
        self._set_headers()
	self.wfile.write(self.path)
        self.wfile.write("<html><body><h1>Get not implemented</h1>" + \
			"<p>Place websocket payload in POST data.</p>" + \
			"</body></html>")

    def do_HEAD(self):
        self._set_headers()
        
    def do_POST(self):
        self._set_headers()
	content_length = int(self.headers['Content-Length'])
	post_data = self.rfile.read(content_length)
	dbg("Received POST data:\n" + repr(post_data))
	resp = ''
	if "wss" in url:
		ws = websocket.create_connection(url, sslopt={"cert_reqs": ssl.CERT_NONE}, header=headers)
	else:
		ws = websocket.create_connection(url, header=headers)
	pd = urllib.unquote(post_data)
	ws.send(pd)
	dbg("Sent WebSocket data:\n" + repr(pd))
	try:
		ws_received = ws.recv()
		ws.close()
	except websocket.WebSocketConnectionClosedException:
		self.send_response(500)
		print "\033[31m[ERR] WebSocket closed unexpectedly.\033[0m"
		ws_received = 'Error: WebSocket closed unexpectedly.'
		pass
	dbg("Received WebSocket data:\n" + repr(ws_received))

	resp = ( "<html><body><h1>Response to POST</h1><p>" + \
		"UnESCAPED WS RESPONSE:\n</br></br>\n" + \
		ws_received + \
		"\n</br></br>\n" + \
		"</p></body></html>" )
       	self.wfile.write(resp)
	dbg("Sent received data back to web client.")

def dbg(msg):
	if verbose:
		print "\033[33m[DBG] " + msg + "\033[0m"

        
def run(server_class=HTTPServer, handler_class=S, port=80):
	server_address = ('', port)
	httpd = server_class(server_address, handler_class)
	print '\033[34m[SRV] Starting websocket proxy on port %d...\033[0m' % port
	httpd.serve_forever()

if __name__ == "__main__":
	print "\033[34m\n\tWSockProxy v1.0.0.1\n\033[0m"
	parser = argparse.ArgumentParser()
	parser.add_argument("URL", type=str,
				help="url of WebSocket server to connect to \n'ws://localhost:8000' format")
	parser.add_argument("-p", "--port", type=int, default=80,
				help="port number for proxy server to listen on")
	parser.add_argument("-H", "--header", default=["User-Agent: WSockProxy"], action='append',
				help="additional HTTP headers for WebSocket server")
	parser.add_argument("-v", "--verbose", default=False,
				help="increase output verbosity", action="store_true")
	args = parser.parse_args()
	url = args.URL
	verbose = args.verbose
	headers = args.header
	dbg("WebSocket request headers:\n" + repr(args.header))
	
        run(port=args.port)
