#!/usr/bin/python

###
### Free Robtex API in use
###
### Modify to proapi.robtex.com/ipquery/ip?key=xxxx
###

import json
import requests
import sys
import time 
import re
import socket
from bs4 import BeautifulSoup

needs = ["asname","whoisdesc","as","bgproute"]
ippattern = r"([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})"
i=1

def get_domains(domain):
    dnsdumpster_url = 'https://dnsdumpster.com/'
    req = requests.Session().get(dnsdumpster_url)
    soup = BeautifulSoup(req.content, 'html.parser')
    csrf_middleware = soup.findAll('input', attrs={'name': 'csrfmiddlewaretoken'})[0]['value']
    cookies = {'csrftoken': csrf_middleware}
    headers = {'Referer': dnsdumpster_url}
    data = {'csrfmiddlewaretoken': csrf_middleware, 'targetip': domain}
    req = requests.Session().post(dnsdumpster_url, cookies=cookies, data=data, headers=headers)
    soup = BeautifulSoup(req.content, 'html.parser')
    tables = soup.findAll('table')
    trs = tables[3].findAll('tr')
    domains = list()
    for tr in trs:
        tds = tr.findAll('td')
        domains.append(re.findall("<td class=\"col-md-4\">(.*?)<br/>", str(tds[0]))[0])
    return domains


def get_info(addr):
    global i
    global needs
    try:
        if re.match(ippattern,addr):
            ip_addr = addr
        else:
            ip_addr = socket.gethostbyname(addr)
    except Exception:
        print addr + ";BAD ADDRESS;COULD NOT RESOLVED;",
        return
    while True:
            try:
                r = requests.get("https://freeapi.robtex.com/ipquery/"+ip_addr).json()
            except Exception:
                r = {"status":"ratelimited"}
            if r["status"] == "ratelimited":
                sys.stderr.write("[!] Rate limiting encountered: %ds\r" % i)
                time.sleep(i)
                i = i + 1
            else:
                i = i - 1
                i = max(i, 0)
                sys.stderr.flush()   
                break

    for need in needs:
        if need not in r:
            r[need] = "NONE"
    if "try a more specific query" in r["whoisdesc"]:
        r["whoisdesc"] = "FREE IP POOL"
    if r["asname"] != "NONE":
        print addr + "\t" + str(r["asname"].encode('utf-8'))+"," + r["whoisdesc"].encode('utf-8') + "\t" + str(r["as"]) + "\t" + str(r["bgproute"]),
    else:
        print addr + "\t" + str(r["asdesc"].encode('utf-8'))+"," + str(r["whoisdesc"].encode('utf-8')) + "\t" + str(r["as"]) + "\t" + str(r["bgproute"]),
    return

try:
    if len(sys.argv) != 2:
        print "USAGE: ./find_netblocks.py target.com"
        sys.exit(1)
    else:
        target = sys.argv[1]
    print "[i] Searching DNSDumpster API..."
    try:
        domains = get_domains(target)
    except Exception:
        print "[!] DNSDumpster API ERROR!"
        sys.exit(1)
    print "[+] Got %d domains!" % len(domains)
    print "[i] Searching for netblocks..."
    for d in domains:
        get_info(d)
        print "\n",
except Exception:
    print "[!] FATAL ERROR!\n"
    raise
